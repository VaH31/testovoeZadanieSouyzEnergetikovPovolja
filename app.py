import os
import requests
import streamlit as st
from transformers import pipeline
from langdetect import detect, DetectorFactory
from dotenv import load_dotenv
load_dotenv()

DetectorFactory.seed = 0

@st.cache_resource
def load_en_pipeline():
    model_id = "cardiffnlp/twitter-roberta-base-sentiment"
    return pipeline("sentiment-analysis", model=model_id, tokenizer=model_id)


@st.cache_resource
def load_ru_pipeline():
    model_id = "blanchefort/rubert-base-cased-sentiment"
    return pipeline("sentiment-analysis", model=model_id, tokenizer=model_id)


def detect_lang(text: str) -> str:
    try:
        lang = detect(text)
        return 'ru' if lang.startswith('ru') else 'en'
    except Exception:
        return 'en'


def map_label(label: str, lang: str) -> str:
    l = label.upper()
    if lang == 'en':
        mapping = {
            'LABEL_0': 'NEGATIVE',
            'LABEL_1': 'NEUTRAL',
            'LABEL_2': 'POSITIVE',
            'NEGATIVE': 'NEGATIVE',
            'NEUTRAL': 'NEUTRAL',
            'POSITIVE': 'POSITIVE',
        }
        return mapping.get(l, l)
    else:
        return l if l in ['POSITIVE', 'NEUTRAL', 'NEGATIVE'] else l


def analyze_sentiment(text: str):
    lang = detect_lang(text)
    clf = load_ru_pipeline() if lang == 'ru' else load_en_pipeline()
    chunk = text.strip()[:2000]  # –æ–≥—Ä–∞–Ω–∏—á–∏–º –¥–ª—è —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏
    res = clf(chunk)[0]
    label = map_label(res['label'], lang)
    score = float(res.get('score', 0.0))
    return {'tone': label, 'score': score, 'lang': lang}


# --- Mistral API  ---
def mistral_generate_recs(transcript: str, tone_ui: str):
    api_key = "os.getenv(checkKey)"
    if not api_key:
        return None, "MISTRAL_API_KEY not set"

    endpoint = "https://api.mistral.ai/v1/chat/completions"
    headers = {"Authorization": f"Bearer {api_key}", "Content-Type": "application/json"}
    payload = {
        "model": "mistral-tiny",  # –∏–ª–∏ "mistral-small"/"mistral-medium"
        "messages": [
            {"role": "system", "content": "–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∫–∞—á–µ—Å—Ç–≤—É –∑–≤–æ–Ω–∫–æ–≤."},
            {"role": "user", "content": f"–¢–æ–Ω —Ä–∞–∑–≥–æ–≤–æ—Ä–∞: {tone_ui}.\n–¢–µ–∫—Å—Ç: {transcript}\n\n–î–∞–π 1‚Äì2 –∫—Ä–∞—Ç–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é."}
        ],
        "max_tokens": 120
    }
    try:
        r = requests.post(endpoint, headers=headers, json=payload, timeout=30)
        r.raise_for_status()
        data = r.json()
        return data["choices"][0]["message"]["content"].strip(), None
    except Exception as e:
        return None, str(e)


def rule_based_recs(tone: str, lang: str) -> str:
    if lang == 'ru':
        if tone == 'NEGATIVE':
            return "- –°–ø–æ–∫–æ–π–Ω–æ –ø—Ä–∏–∑–Ω–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—É –∏ –∏–∑–≤–∏–Ω–∏—Ç—å—Å—è.\n- –ó–∞–¥–∞–≤–∞—Ç—å —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ —Å –¥–µ–¥–ª–∞–π–Ω–æ–º."
        if tone == 'NEUTRAL':
            return "- –î–æ–±–∞–≤–∏—Ç—å —ç–º–ø–∞—Ç–∏—é (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å, —á—Ç–æ —É—Å–ª—ã—à–∞–ª–∏).\n- –ß—ë—Ç–∫–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞—Ç—å —à–∞–≥–∏: —á—Ç–æ –º—ã —Å–¥–µ–ª–∞–µ–º –∏ –∫–æ–≥–¥–∞."
        return "- –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä—ë–Ω–Ω–æ—Å—Ç–∏ –ø–∏—Å—å–º–æ–º.\n- –°–ø—Ä–æ—Å–∏—Ç—å, —á—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –≤ —Å–ª–µ–¥—É—é—â–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–µ."
    else:
        if tone == 'NEGATIVE':
            return "- Acknowledge the issue and apologize.\n- Ask clarifying questions and offer a concrete next step with a timeline."
        if tone == 'NEUTRAL':
            return "- Add empathy cues (reflect and confirm).\n- Structure the next steps clearly: what, who, when."
        return "- Confirm agreements in writing.\n- Ask for feedback on how to improve the next interaction."


st.set_page_config(page_title="üìû –ê–≥–µ–Ω—Ç –æ—Ü–µ–Ω–∫–∏ –∑–≤–æ–Ω–∫–æ–≤", page_icon="üìû", layout="centered")
st.title("üìû –ê–≥–µ–Ω—Ç –æ—Ü–µ–Ω–∫–∏ –∑–≤–æ–Ω–∫–æ–≤")
st.caption("MVP: –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–Ω–∞ + —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏. –õ–æ–∫–∞–ª—å–Ω–∞—è sentiment-–º–æ–¥–µ–ª—å + Mistral API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.")


with st.form("input_form"):
    text = st.text_area("–í—Å—Ç–∞–≤—å—Ç–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É —Ä–∞–∑–≥–æ–≤–æ—Ä–∞", height=200, placeholder="–ö–ª–∏–µ–Ω—Ç: ... –û–ø–µ—Ä–∞—Ç–æ—Ä: ...")
    submitted = st.form_submit_button("–û—Ü–µ–Ω–∏—Ç—å")


if submitted:
    if not text or not text.strip():
        st.warning("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞.")
    else:
        with st.spinner("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é..."):
            result = analyze_sentiment(text)
        tone_map = {'NEGATIVE': '–Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π', 'NEUTRAL': '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π', 'POSITIVE': '–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π'}
        ui_tone = tone_map.get(result['tone'], result['tone'])

        st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç")
        st.write(f"**–¢–æ–Ω –æ–±—â–µ–Ω–∏—è:** {ui_tone} \n**–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:** {result['score']:.2f} \n**–û–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π —è–∑—ã–∫:** {result['lang']}")

        # –ü–æ–ø—ã—Ç–∫–∞ LLM —á–µ—Ä–µ–∑ Mistral; –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî —Ñ–æ–ª–ª–±–µ–∫
        gen, err = mistral_generate_recs(text, ui_tone)
        if gen:
            st.write("**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**")
            st.write(gen)
        else:
            st.write("**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (–ø—Ä–∞–≤–∏–ª–æ-–±–∞–∑–æ–≤—ã–π —Ñ–æ–ª–ª–±–µ–∫):**")
            st.write(rule_based_recs(result['tone'], result['lang']))
        if err:
            with st.expander("–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞"):
                st.code(str(err))

        st.divider()
        with st.expander("–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"):
            st.json(result)
